{%- if pillar.get("galera", {}).master is defined %}
    {%- from "galera/map.jinja" import master as server with context -%}
{%- elif pillar.get("galera", {}).slave is defined %}
    {%- from "galera/map.jinja" import slave as server with context -%}
{%- else -%}
    {%- from "mysql/map.jinja" import server with context -%}
{%- endif -%}
### backupninja mysql config file ###

databases   = {% for db_name, db in pillar.get('mysql', {}).server.get('database', {}).iteritems() %} {{ db_name }}{% endfor %}
backupdir   = /var/backups/mysql
hotcopy     = no
sqldump     = yes
compress    = yes

### authentication ###

# three authentication methods:
#
# 1. setting the user, so that /home/user/.my.cnf is used.
# user = some-unix-user
#
# 2. specifying the mysql dbuser and dbpassword,
#    which generates a temporary .my.cnf in /root/.my.cnf
dbusername  = {{ server.admin.user }}
dbpassword  = {{ server.admin.password }}
#
# 3. specify which config file to use with configfile
#    (this option does not work with hotcopy)
# configfile = /etc/mysql/debian.cnf
#
# if user and dbusername are not specified, the default is to use
# /etc/mysql/debian.cnf for configfile.

# hotcopy = < yes | no > (default = no)
# make a backup of the actual database binary files using mysqlhotcopy.
#
# sqldump = < yes | no > (default = no)
# make a backup using mysqldump. this creates text files with sql commands
# sufficient to recontruct the database.
#
sqldumpoptions = --single-transaction --hex-blob --quick --quote-names --add-drop-table
# (default = --lock-tables --complete-insert --add-drop-table --quick --quote-names)
# arguments to pass to mysqldump
#
# compress = < yes | no > (default = yes)
# if yes, compress the sqldump output.
#
# vsname = <vserver> (no default)
# what vserver to operate on (only used if vserver = yes
# in /etc/backupninja.conf), if you do not specify a vsname the
# host will be operated on
#
# NB: databases = all doesn't seem to work with hotcopy = yes
# when vsname is specified, I would like to know how to fix this.
